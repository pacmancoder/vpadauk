use super::ir::IrOpcode;

#[non_exhaustive]
#[repr(u16)]
pub enum OpcodeStamp {
    // Misc operations
    Nop = 0x0000,
    Ldsptl = 0x0006,
    Ldspth = 0x0007,
    Addca = 0x0010,
    Subca = 0x0011,
    Izsna = 0x0012,
    Dzsna = 0x0013,
    Pcadda = 0x0017,
    Nota = 0x0018,
    Nega = 0x0019,
    Sra = 0x001A,
    Sla = 0x001B,
    Srca = 0x001C,
    Slca = 0x001D,
    Swapa = 0x001E,
    Wdreset = 0x0030,
    Pushaf = 0x0032,
    Popaf = 0x0033,
    Reset = 0x0035,
    Stopsys = 0x0036,
    Stopexe = 0x0037,
    Engint = 0x0038,
    Disgint = 0x0039,
    Ret = 0x003A,
    Reti = 0x003B,
    Mul = 0x003C,
    // IO operations,
    Xorioa = 0x0060,
    Movioa = 0x0080,
    Movaio = 0x00A0,
    // Memory 16 bit operations
    Stt16 = 0x00C0,
    Ldt16 = 0x00C1,
    Idxmma = 0x00E0,
    Idxmam = 0x00E1,
    // Return with result operation
    Retk = 0x0100,
    // Bit operations
    T0snm = 0x0200,
    T1snm = 0x0210,
    Set0m = 0x0300,
    Set1m = 0x0310,
    // Operations with acc and memory
    Addma = 0x0400,
    Subma = 0x0440,
    Addcma = 0x0480,
    Subcma = 0x04C0,
    Andma = 0x0500,
    Orma = 0x0540,
    Xorma = 0x0580,
    Movma = 0x05C0,
    Addam = 0x0600,
    Subam = 0x0640,
    Addcam = 0x0680,
    Subcam = 0x06C0,
    Andam = 0x0700,
    Oram = 0x0740,
    Xoram = 0x0780,
    Movam = 0x07C0,
    // Operations with memory
    Addcm = 0x0800,
    Subcm = 0x0840,
    Izsnm = 0x0880,
    Dzsnm = 0x08C0,
    Incm = 0x0900,
    Decm = 0x0940,
    Clearm = 0x0980,
    Xchm = 0x09C0,
    Notm = 0x0A00,
    Negm = 0x0A40,
    Srm = 0x0A80,
    Slm = 0x0AC0,
    Srcm = 0x0B00,
    Slcm = 0x0B40,
    Ceqsnam = 0x0B80,
    // IO bit operations
    T0snio = 0x0C00,
    T1snio = 0x0D00,
    Set0io = 0x0E00,
    Set1io = 0x0F00,
    // Operations with a and literal
    Addak = 0x1000,
    Subak = 0x1100,
    Ceqsnak = 0x1200,
    Andak = 0x1400,
    Orak = 0x1500,
    Xorak = 0x1600,
    Movak = 0x1700,
    // Control transfers
    Goto = 0x1800,
    Call = 0x1C00,
}

impl OpcodeStamp {
    // Safe as long as OpcodeStamp is non-exhaustive
    pub fn from_primitive(value: u16) -> OpcodeStamp {
        unsafe { core::mem::transmute(value) }
    }

    pub fn to_ir_opcode(&self) -> IrOpcode {
        match self {
            Self::Nop => IrOpcode::Nop,
            Self::Ldsptl => IrOpcode::Ldsptl,
            Self::Ldspth => IrOpcode::Ldspth,
            Self::Addca => IrOpcode::Addca,
            Self::Subca => IrOpcode::Subca,
            Self::Izsna => IrOpcode::Izsna,
            Self::Dzsna => IrOpcode::Dzsna,
            Self::Pcadda => IrOpcode::Pcadda,
            Self::Nota => IrOpcode::Nota,
            Self::Nega => IrOpcode::Nega,
            Self::Sra => IrOpcode::Sra,
            Self::Sla => IrOpcode::Sla,
            Self::Srca => IrOpcode::Srca,
            Self::Slca => IrOpcode::Slca,
            Self::Swapa => IrOpcode::Swapa,
            Self::Wdreset => IrOpcode::Wdreset,
            Self::Pushaf => IrOpcode::Pushaf,
            Self::Popaf => IrOpcode::Popaf,
            Self::Reset => IrOpcode::Reset,
            Self::Stopsys => IrOpcode::Stopsys,
            Self::Stopexe => IrOpcode::Stopexe,
            Self::Engint => IrOpcode::Engint,
            Self::Disgint => IrOpcode::Disgint,
            Self::Ret => IrOpcode::Ret,
            Self::Reti => IrOpcode::Reti,
            Self::Mul => IrOpcode::Mul,
            Self::Xorioa => IrOpcode::Xorioa,
            Self::Movioa => IrOpcode::Movioa,
            Self::Movaio => IrOpcode::Movaio,
            Self::Stt16 => IrOpcode::Stt16,
            Self::Ldt16 => IrOpcode::Ldt16,
            Self::Idxmma => IrOpcode::Idxmma,
            Self::Idxmam => IrOpcode::Idxmam,
            Self::Retk => IrOpcode::Retk,
            Self::T0snm => IrOpcode::T0snm,
            Self::T1snm => IrOpcode::T1snm,
            Self::Set0m => IrOpcode::Set0m,
            Self::Set1m => IrOpcode::Set1m,
            Self::Addma => IrOpcode::Addma,
            Self::Subma => IrOpcode::Subma,
            Self::Addcma => IrOpcode::Addcma,
            Self::Subcma => IrOpcode::Subcma,
            Self::Andma => IrOpcode::Andma,
            Self::Orma => IrOpcode::Orma,
            Self::Xorma => IrOpcode::Xorma,
            Self::Movma => IrOpcode::Movma,
            Self::Addam => IrOpcode::Addam,
            Self::Subam => IrOpcode::Subam,
            Self::Addcam => IrOpcode::Addcam,
            Self::Subcam => IrOpcode::Subcam,
            Self::Andam => IrOpcode::Andam,
            Self::Oram => IrOpcode::Oram,
            Self::Xoram => IrOpcode::Xoram,
            Self::Movam => IrOpcode::Movam,
            Self::Addcm => IrOpcode::Addcm,
            Self::Subcm => IrOpcode::Subcm,
            Self::Izsnm => IrOpcode::Izsnm,
            Self::Dzsnm => IrOpcode::Dzsnm,
            Self::Incm => IrOpcode::Incm,
            Self::Decm => IrOpcode::Decm,
            Self::Clearm => IrOpcode::Clearm,
            Self::Xchm => IrOpcode::Xchm,
            Self::Notm => IrOpcode::Notm,
            Self::Negm => IrOpcode::Negm,
            Self::Srm => IrOpcode::Srm,
            Self::Slm => IrOpcode::Slm,
            Self::Srcm => IrOpcode::Srcm,
            Self::Slcm => IrOpcode::Slcm,
            Self::Ceqsnam => IrOpcode::Ceqsnam,
            Self::T0snio => IrOpcode::T0snio,
            Self::T1snio => IrOpcode::T1snio,
            Self::Set0io => IrOpcode::Set0io,
            Self::Set1io => IrOpcode::Set1io,
            Self::Addak => IrOpcode::Addak,
            Self::Subak => IrOpcode::Subak,
            Self::Ceqsnak => IrOpcode::Ceqsnak,
            Self::Andak => IrOpcode::Andak,
            Self::Orak => IrOpcode::Orak,
            Self::Xorak => IrOpcode::Xorak,
            Self::Movak => IrOpcode::Movak,
            Self::Goto => IrOpcode::Goto,
            Self::Call => IrOpcode::Call,
        }
    }
}